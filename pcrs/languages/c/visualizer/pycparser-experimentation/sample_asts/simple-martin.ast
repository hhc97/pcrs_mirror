FileAST:
  Typedef: Node, [], ['typedef']
    TypeDecl: Node, []
      Struct: ll_node
        Decl: next, [], [], []
          PtrDecl: []
            TypeDecl: next, []
              Struct: ll_node
        Decl: prev, [], [], []
          PtrDecl: []
            TypeDecl: prev, []
              Struct: ll_node
        Decl: val, [], [], []
          TypeDecl: val, []
            IdentifierType: ['int']
  FuncDef:
    Decl: main, [], [], []
      FuncDecl:
        ParamList:
          Decl: argc, [], [], []
            TypeDecl: argc, []
              IdentifierType: ['int']
          Decl: argv, [], [], []
            PtrDecl: []
              PtrDecl: []
                TypeDecl: argv, []
                  IdentifierType: ['char']
        TypeDecl: main, []
          IdentifierType: ['int']
    Compound:
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
        Constant: int, 5
      Assignment: =
        ID: i
        Constant: int, 3
      Decl: j, [], [], []
        TypeDecl: j, []
          IdentifierType: ['int']
      Assignment: =
        ID: j
        Constant: int, 2
      Decl: myptr, [], [], []
        PtrDecl: []
          TypeDecl: myptr, []
            IdentifierType: ['char']
      Assignment: =
        ID: myptr
        FuncCall:
          ID: malloc
          ExprList:
            Constant: int, 2
      Assignment: =
        UnaryOp: *
          ID: myptr
        Constant: char, 'j'
      Decl: array, [], [], []
        PtrDecl: []
          TypeDecl: array, []
            IdentifierType: ['int']
      Assignment: =
        UnaryOp: *
          ID: array
        ID: j
      FuncCall:
        ID: printf
        ExprList:
          Constant: string, "hello world%d\n"
          Constant: int, 2
      FuncCall:
        ID: printf
        ExprList:
          Constant: string, "hey\n"
      Decl: q, [], [], []
        TypeDecl: q, []
          IdentifierType: ['int']
      Assignment: =
        ID: q
        Constant: int, 4
      Decl: high_score, [], [], []
        ArrayDecl: []
          TypeDecl: high_score, []
            IdentifierType: ['int']
          Constant: int, 20
        InitList:
          Constant: int, 1
          Constant: int, 2
          Constant: int, 3
      Assignment: =
        ArrayRef:
          ID: high_score
          Constant: int, 10
        Constant: int, 10
      Decl: n, [], [], []
        PtrDecl: []
          TypeDecl: n, []
            IdentifierType: ['Node']
        FuncCall:
          ID: malloc
          ExprList:
            UnaryOp: sizeof
              Typename: None, []
                TypeDecl: None, []
                  IdentifierType: ['Node']
      Return:
